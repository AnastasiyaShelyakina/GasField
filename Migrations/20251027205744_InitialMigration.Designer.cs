// <auto-generated />
using System;
using GasField.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GasField.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20251027205744_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GasField.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Администратор системы",
                            Login = "Operator",
                            PasswordHash = "$2a$11$3ufDM9/ALD4/aoVANHk7FuFfFlJPcw8LfzQRlX7e8KQVIR3XfWoYi",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Инженер по добыче",
                            Login = "Engineer",
                            PasswordHash = "$2a$11$3ufDM9/ALD4/aoVANHk7FuFfFlJPcw8LfzQRlX7e8KQVIR3XfWoYi",
                            Role = "Engineer"
                        });
                });

            modelBuilder.Entity("GasField.Models.Ukpg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ukpgs");
                });

            modelBuilder.Entity("GasField.Models.Well", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BottomGvk")
                        .HasColumnType("float");

                    b.Property<double>("BottomPerforation")
                        .HasColumnType("float");

                    b.Property<double>("Extraction")
                        .HasColumnType("float");

                    b.Property<double>("RoofGvk")
                        .HasColumnType("float");

                    b.Property<double>("RoofPerforation")
                        .HasColumnType("float");

                    b.Property<int>("UkpgId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UkpgId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("GasField.Models.Well", b =>
                {
                    b.HasOne("GasField.Models.Ukpg", "Ukpg")
                        .WithMany("Wells")
                        .HasForeignKey("UkpgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ukpg");
                });

            modelBuilder.Entity("GasField.Models.Ukpg", b =>
                {
                    b.Navigation("Wells");
                });
#pragma warning restore 612, 618
        }
    }
}
