// <auto-generated />
using GasField.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GasField.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GasField.Models.Ukpg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MonthlyProduction")
                        .HasColumnType("float");

                    b.Property<int>("WellCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ukpgs");
                });

            modelBuilder.Entity("GasField.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalNumber")
                        .HasColumnType("int");

                    b.Property<int>("UsernameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GasField.Models.Username", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Username");
                });

            modelBuilder.Entity("GasField.Models.Well", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BottomGvk")
                        .HasColumnType("float");

                    b.Property<double>("BottomPerforation")
                        .HasColumnType("float");

                    b.Property<double>("RoofGvk")
                        .HasColumnType("float");

                    b.Property<double>("RoofPerforation")
                        .HasColumnType("float");

                    b.Property<int>("UkpgId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UkpgId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("GasField.Models.Username", b =>
                {
                    b.HasOne("GasField.Models.User", "User")
                        .WithOne("Username")
                        .HasForeignKey("GasField.Models.Username", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GasField.Models.Well", b =>
                {
                    b.HasOne("GasField.Models.Ukpg", "Ukpg")
                        .WithMany("Wells")
                        .HasForeignKey("UkpgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ukpg");
                });

            modelBuilder.Entity("GasField.Models.Ukpg", b =>
                {
                    b.Navigation("Wells");
                });

            modelBuilder.Entity("GasField.Models.User", b =>
                {
                    b.Navigation("Username");
                });
#pragma warning restore 612, 618
        }
    }
}
